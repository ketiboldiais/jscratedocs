"use strict";(self.webpackChunkjscratedocs=self.webpackChunkjscratedocs||[]).push([[495],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>u});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),d=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=d(e.components);return r.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),m=d(t),u=a,g=m["".concat(p,".").concat(u)]||m[u]||c[u]||o;return t?r.createElement(g,l(l({ref:n},s),{},{components:t})):r.createElement(g,l({ref:n},s))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=m;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var d=2;d<o;d++)l[d]=t[d];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6974:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var r=t(7462),a=(t(7294),t(3905));const o={sidebar_label:"Graph"},l="Graph",i={unversionedId:"Graph",id:"Graph",title:"Graph",description:"jsCrate contains several graph ADTs. This page documents the most basic",source:"@site/docs/Graph.mdx",sourceDirName:".",slug:"/Graph",permalink:"/jscratedocs/docs/Graph",draft:!1,tags:[],version:"current",frontMatter:{sidebar_label:"Graph"},sidebar:"tutorialSidebar",previous:{title:"Doubly-linked Lists",permalink:"/jscratedocs/docs/DoublyLinkedList"},next:{title:"Max Heap",permalink:"/jscratedocs/docs/HeapMax"}},p={},d=[{value:"adjacent(\ud835\udc63, \ud835\udc64)",id:"adjacent\ud835\udc63-\ud835\udc64",level:2},{value:"independent(\ud835\udc63, \ud835\udc64)",id:"independent\ud835\udc63-\ud835\udc64",level:2},{value:"isolated(\ud835\udc63)",id:"isolated\ud835\udc63",level:2},{value:"complete()",id:"complete",level:2},{value:"degree(\ud835\udc63)",id:"degree\ud835\udc63",level:2},{value:"neighborhood(\ud835\udc63)",id:"neighborhood\ud835\udc63",level:2},{value:"edgeCount()",id:"edgecount",level:2},{value:"vertexCount()",id:"vertexcount",level:2}],s={toc:d};function c(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"graph"},"Graph"),(0,a.kt)("p",null,"jsCrate contains several graph ADTs. This page documents the most basic\nimplementation \u2014 ",(0,a.kt)("inlineCode",{parentName:"p"},"Graph"),", which implements a simple graph. Compared to\nother modules:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Module"),(0,a.kt)("th",{parentName:"tr",align:null},"Edges"),(0,a.kt)("th",{parentName:"tr",align:null},"Multiple Edges Allowed?"),(0,a.kt)("th",{parentName:"tr",align:null},"Loops Allowed?"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Graph")),(0,a.kt)("td",{parentName:"tr",align:null},"Undirected"),(0,a.kt)("td",{parentName:"tr",align:null},"No"),(0,a.kt)("td",{parentName:"tr",align:null},"No")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Multigraph")),(0,a.kt)("td",{parentName:"tr",align:null},"Undirected"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes"),(0,a.kt)("td",{parentName:"tr",align:null},"No")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Pseudograph")),(0,a.kt)("td",{parentName:"tr",align:null},"Undirected"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Digraph")),(0,a.kt)("td",{parentName:"tr",align:null},"Directed"),(0,a.kt)("td",{parentName:"tr",align:null},"No"),(0,a.kt)("td",{parentName:"tr",align:null},"No")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Dimultigraph")),(0,a.kt)("td",{parentName:"tr",align:null},"Directed"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"MixedGraph")),(0,a.kt)("td",{parentName:"tr",align:null},"Directed and Undirected"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes"),(0,a.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,a.kt)("h2",{id:"adjacent\ud835\udc63-\ud835\udc64"},"adjacent(\ud835\udc63, \ud835\udc64)"),(0,a.kt)("p",null,"Returns ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," if vertices \ud835\udc63 and \ud835\udc64 are adjacent (i.e., have an edge\nconnecting them), ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'import { Graph } from "@crates";\nimport { Print } from "@util";\n\nconst g = Graph(\n    ["Tokyo", "London"],\n    ["New York", "London"],\n    ["Paris", "London"],\n    ["New Dehli", "Moscow"],\n    ["New Dehli", "New York"],\n);\nPrint(g.adjacent("Tokyo", "New York"));\nPrint(g.adjacent("New Dehli", "Moscow"));\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-terminal"},"false\ntrue\n")),(0,a.kt)("h2",{id:"independent\ud835\udc63-\ud835\udc64"},"independent(\ud835\udc63, \ud835\udc64)"),(0,a.kt)("p",null,"Returns ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," if \ud835\udc63 and \ud835\udc64 are independent (i.e., no edge connects them),\n",(0,a.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'import { Graph } from "@crates";\nimport { Print } from "@util";\n\nconst g = Graph(\n    ["Tokyo", "London"],\n    ["New York", "London"],\n    ["Paris", "London"],\n    ["New Dehli", "Moscow"],\n    ["New Dehli", "New York"],\n);\nPrint(g.independent("London", "Moscow"));\nPrint(g.independent("New York", "London"));\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-terminal"},"true\nfalse\n")),(0,a.kt)("h2",{id:"isolated\ud835\udc63"},"isolated(\ud835\udc63)"),(0,a.kt)("p",null,"Returns ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," if \ud835\udc63 is not connected to any other vertex, ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),"\notherwise."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'import { Graph } from "@crates";\nimport { Print } from "@util";\n\nconst g = Graph(\n    ["Tokyo", "London"],\n    ["New York", "London"],\n    ["Paris", "London"],\n    ["New Dehli", "Moscow"],\n    ["New Dehli", "New York"],\n    "Pyongyang",\n);\nPrint(g.isolated("London"));\nPrint(g.isolated("Pyongyang"));\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-terminal"},"true\nfalse\n")),(0,a.kt)("h2",{id:"complete"},"complete()"),(0,a.kt)("p",null,"Returns ",(0,a.kt)("inlineCode",{parentName:"p"},"true")," if the graph is complete, ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," otherwise. A graph is\ncomplete if every pair of unique vertices is connected by an edge."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'import { Graph } from "@crates";\nimport { Print } from "@util";\n\nconst g = Graph(\n    ["LA", "Chicago"],\n    ["Atlanta", "Chicago"],\n    ["LA", "Atlanta"],\n);\n\nconst gIsComplete = g.complete();\n\nPrint(gIsComplete);\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-terminal"},"true\n")),(0,a.kt)("h2",{id:"degree\ud835\udc63"},"degree(\ud835\udc63)"),(0,a.kt)("p",null,"Returns the degree of the vertex \ud835\udc63 (i.e., the number of edges incident to\n\ud835\udc63)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'import { Graph } from "@crates";\nimport { Print } from "@util";\n\nconst g = Graph(\n    ["Tokyo", "London"],\n    ["New York", "London"],\n    ["Paris", "London"],\n    ["New Dehli", "Moscow"],\n    ["New Dehli", "New York"],\n);\nPrint(g.degree("New Dehli"));\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-terminal"},"2\n")),(0,a.kt)("h2",{id:"neighborhood\ud835\udc63"},"neighborhood(\ud835\udc63)"),(0,a.kt)("p",null,"Returns the neighborhood of \ud835\udc63 (the set of all nodes directly connected to\n\ud835\udc63)."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'import { Graph } from "@crates";\nimport { Print } from "@util";\n\nconst g = Graph(\n    ["Tokyo", "London"],\n    ["New York", "London"],\n    ["Paris", "London"],\n    ["New Dehli", "Moscow"],\n    ["New Dehli", "New York"],\n);\nPrint(g.neighborhood("New York"));\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-terminal"},"[London, New Dehli]\n")),(0,a.kt)("h2",{id:"edgecount"},"edgeCount()"),(0,a.kt)("p",null,"Returns the number of edges in the graph."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'import { Graph } from "@crates";\nimport { Print } from "@util";\n\nconst g = Graph(\n    ["Tokyo", "London"],\n    ["New York", "London"],\n    ["Paris", "London"],\n    ["New Dehli", "Moscow"],\n    ["New Dehli", "New York"],\n);\nPrint(g.edgeCount());\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-terminal"},"5\n")),(0,a.kt)("h2",{id:"vertexcount"},"vertexCount()"),(0,a.kt)("p",null,"Returns the number of vertices in the graph."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},'import { Graph } from "@crates";\nimport { Print } from "@util";\n\nconst g = Graph(\n    ["Tokyo", "London"],\n    ["New York", "London"],\n    ["Paris", "London"],\n    ["New Dehli", "Moscow"],\n    ["New Dehli", "New York"],\n);\nPrint(g.vertexCount());\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-terminal"},"6\n")))}c.isMDXComponent=!0}}]);