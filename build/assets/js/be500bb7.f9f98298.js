"use strict";(self.webpackChunkjscratedocs=self.webpackChunkjscratedocs||[]).push([[137],{3905:(t,e,n)=>{n.d(e,{Zo:()=>k,kt:()=>p});var l=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);e&&(l=l.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,l)}return n}function u(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,l,r=function(t,e){if(null==t)return{};var n,l,r={},a=Object.keys(t);for(l=0;l<a.length;l++)n=a[l],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(l=0;l<a.length;l++)n=a[l],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var d=l.createContext({}),o=function(t){var e=l.useContext(d),n=e;return t&&(n="function"==typeof t?t(e):u(u({},e),t)),n},k=function(t){var e=o(t.components);return l.createElement(d.Provider,{value:e},t.children)},s={inlineCode:"code",wrapper:function(t){var e=t.children;return l.createElement(l.Fragment,{},e)}},c=l.forwardRef((function(t,e){var n=t.components,r=t.mdxType,a=t.originalType,d=t.parentName,k=i(t,["components","mdxType","originalType","parentName"]),c=o(n),p=r,m=c["".concat(d,".").concat(p)]||c[p]||s[p]||a;return n?l.createElement(m,u(u({ref:e},k),{},{components:n})):l.createElement(m,u({ref:e},k))}));function p(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var a=n.length,u=new Array(a);u[0]=c;var i={};for(var d in e)hasOwnProperty.call(e,d)&&(i[d]=e[d]);i.originalType=t,i.mdxType="string"==typeof t?t:r,u[1]=i;for(var o=2;o<a;o++)u[o]=n[o];return l.createElement.apply(null,u)}return l.createElement.apply(null,n)}c.displayName="MDXCreateElement"},1297:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>d,contentTitle:()=>u,default:()=>s,frontMatter:()=>a,metadata:()=>i,toc:()=>o});var l=n(7462),r=(n(7294),n(3905));const a={},u="Trie",i={unversionedId:"Tries",id:"Tries",title:"Trie",description:"The Trie module implements a basic trie. Because tries consume",source:"@site/docs/Tries.mdx",sourceDirName:".",slug:"/Tries",permalink:"/jscratedocs/docs/Tries",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Queue",permalink:"/jscratedocs/docs/Queue"},next:{title:"UnionFind",permalink:"/jscratedocs/docs/UnionFind"}},d={},o=[{value:"Constructor",id:"constructor",level:2},{value:"insert(\ud835\udc46)",id:"insert\ud835\udc46",level:2},{value:"delete(\ud835\udc46)",id:"delete\ud835\udc46",level:2},{value:"has(\ud835\udc46)",id:"has\ud835\udc46",level:2}],k={toc:o};function s(t){let{components:e,...n}=t;return(0,r.kt)("wrapper",(0,l.Z)({},k,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"trie"},"Trie"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Trie")," module implements a basic trie. Because tries consume\nsignificant amounts of memory, the ",(0,r.kt)("inlineCode",{parentName:"p"},"Trie"),' module will only work with the\nASCII characters listed in the Alphabet dropwdown below (lower-case English\nletters "a" through "z"). Uppercase letters are treated as lower-case\nletters through a simple or-shortcircuit that checks for\n',(0,r.kt)("inlineCode",{parentName:"p"},"toLocaleLowerCase()"),". If uppercase letters should be treated as unique\nglyphs, see the next paragraph."),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Alphabet"),(0,r.kt)("table",null,(0,r.kt)("thead",null,(0,r.kt)("tr",null,(0,r.kt)("th",null,"Dec"),(0,r.kt)("th",null,"Hx"),(0,r.kt)("th",null,"Oct"),(0,r.kt)("th",null,"Html"),(0,r.kt)("th",null,"Char"))),(0,r.kt)("tbody",null,(0,r.kt)("tr",null,(0,r.kt)("td",null,"97"),(0,r.kt)("td",null,"61"),(0,r.kt)("td",null,"141"),(0,r.kt)("td",null,"&#97;"),(0,r.kt)("td",null,"a")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"98"),(0,r.kt)("td",null,"62"),(0,r.kt)("td",null,"142"),(0,r.kt)("td",null,"&#98;"),(0,r.kt)("td",null,"b")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"99"),(0,r.kt)("td",null,"63"),(0,r.kt)("td",null,"143"),(0,r.kt)("td",null,"&#99;"),(0,r.kt)("td",null,"c")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"100"),(0,r.kt)("td",null,"64"),(0,r.kt)("td",null,"144"),(0,r.kt)("td",null,"&#100;"),(0,r.kt)("td",null,"d")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"101"),(0,r.kt)("td",null,"65"),(0,r.kt)("td",null,"145"),(0,r.kt)("td",null,"&#101;"),(0,r.kt)("td",null,"e")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"102"),(0,r.kt)("td",null,"66"),(0,r.kt)("td",null,"146"),(0,r.kt)("td",null,"&#102;"),(0,r.kt)("td",null,"f")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"103"),(0,r.kt)("td",null,"67"),(0,r.kt)("td",null,"147"),(0,r.kt)("td",null,"&#103;"),(0,r.kt)("td",null,"g")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"104"),(0,r.kt)("td",null,"68"),(0,r.kt)("td",null,"150"),(0,r.kt)("td",null,"&#104;"),(0,r.kt)("td",null,"h")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"105"),(0,r.kt)("td",null,"69"),(0,r.kt)("td",null,"151"),(0,r.kt)("td",null,"&#105;"),(0,r.kt)("td",null,"i")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"106"),(0,r.kt)("td",null,"6A"),(0,r.kt)("td",null,"152"),(0,r.kt)("td",null,"&#106;"),(0,r.kt)("td",null,"j")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"107"),(0,r.kt)("td",null,"6B"),(0,r.kt)("td",null,"153"),(0,r.kt)("td",null,"&#107;"),(0,r.kt)("td",null,"k")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"108"),(0,r.kt)("td",null,"6C"),(0,r.kt)("td",null,"154"),(0,r.kt)("td",null,"&#108;"),(0,r.kt)("td",null,"l")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"109"),(0,r.kt)("td",null,"6D"),(0,r.kt)("td",null,"155"),(0,r.kt)("td",null,"&#109;"),(0,r.kt)("td",null,"m")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"110"),(0,r.kt)("td",null,"6E"),(0,r.kt)("td",null,"156"),(0,r.kt)("td",null,"&#110;"),(0,r.kt)("td",null,"n")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"111"),(0,r.kt)("td",null,"6F"),(0,r.kt)("td",null,"157"),(0,r.kt)("td",null,"&#111;"),(0,r.kt)("td",null,"o")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"112"),(0,r.kt)("td",null,"70"),(0,r.kt)("td",null,"160"),(0,r.kt)("td",null,"&#112;"),(0,r.kt)("td",null,"p")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"113"),(0,r.kt)("td",null,"71"),(0,r.kt)("td",null,"161"),(0,r.kt)("td",null,"&#113;"),(0,r.kt)("td",null,"q")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"114"),(0,r.kt)("td",null,"72"),(0,r.kt)("td",null,"162"),(0,r.kt)("td",null,"&#114;"),(0,r.kt)("td",null,"r")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"115"),(0,r.kt)("td",null,"73"),(0,r.kt)("td",null,"163"),(0,r.kt)("td",null,"&#115;"),(0,r.kt)("td",null,"s")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"116"),(0,r.kt)("td",null,"74"),(0,r.kt)("td",null,"164"),(0,r.kt)("td",null,"&#116;"),(0,r.kt)("td",null,"t")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"117"),(0,r.kt)("td",null,"75"),(0,r.kt)("td",null,"165"),(0,r.kt)("td",null,"&#117;"),(0,r.kt)("td",null,"u")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"118"),(0,r.kt)("td",null,"76"),(0,r.kt)("td",null,"166"),(0,r.kt)("td",null,"&#118;"),(0,r.kt)("td",null,"v")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"119"),(0,r.kt)("td",null,"77"),(0,r.kt)("td",null,"167"),(0,r.kt)("td",null,"&#119;"),(0,r.kt)("td",null,"w")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"120"),(0,r.kt)("td",null,"78"),(0,r.kt)("td",null,"170"),(0,r.kt)("td",null,"&#120;"),(0,r.kt)("td",null,"x")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"121"),(0,r.kt)("td",null,"79"),(0,r.kt)("td",null,"171"),(0,r.kt)("td",null,"&#121;"),(0,r.kt)("td",null,"y")),(0,r.kt)("tr",null,(0,r.kt)("td",null,"122"),(0,r.kt)("td",null,"7A"),(0,r.kt)("td",null,"172"),(0,r.kt)("td",null,"&#122;"),(0,r.kt)("td",null,"z"))))),(0,r.kt)("p",null,"To include more glyphs in the alphabet, see the ",(0,r.kt)("inlineCode",{parentName:"p"},"addGlyph")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"addGlyphs"),"\nmethods below. Note, however, that tries achieve their time efficiency by\nconsuming large amounts of memory. With the default alphabet, each node in\nthe trie holds an array of length ",(0,r.kt)("strong",{parentName:"p"},"26"),". Extended ASCII support (including\nall the control characters rarely used today) implies that each node stores\nan array of ",(0,r.kt)("strong",{parentName:"p"},"256"),'. In turn, this implies that, given an alphabet of 256\ncharacters, a simple three letter word like "eat" results in three arrays\nof size 256.'),(0,r.kt)("h2",{id:"constructor"},"Constructor"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"Trie")," can be instantiated by passing an optional comma separated list of\nstring values to the ",(0,r.kt)("inlineCode",{parentName:"p"},"Trie()")," function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { Trie } from "@crates";\nimport { Print } from "@util";\n\nconst trie = Trie("Anne", "Zoe", "Cathy", "Hikari");\nPrint(trie);\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-terminal"},"word: Anne\nword: Cathy\nword: Hikari\nword: Zoe\n")),(0,r.kt)("h2",{id:"insert\ud835\udc46"},"insert(\ud835\udc46)"),(0,r.kt)("p",null,"Inserts the string \ud835\udc46 into the trie:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { Trie } from "@crates";\nimport { Print } from "@util";\n\nconst trie = Trie("Anne", "Zoe", "Cathy", "Hikari");\n\nPrint(trie);\n\ntrie.insert("Boram");\n\nPrint(trie);\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-terminal"},"word: Anne\nword: Cathy\nword: Hikari\nword: Zoe\n\nword: Anne\nword: Boram\nword: Cathy\nword: Hikari\nword: Zoe\n")),(0,r.kt)("h2",{id:"delete\ud835\udc46"},"delete(\ud835\udc46)"),(0,r.kt)("p",null,"Deletes the string \ud835\udc46 in the trie:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { Trie } from "@crates";\nimport { Print } from "@util";\n\nconst trie = Trie("Billy", "Joe", "Cathy", "Hikari");\n\nPrint(trie);\n\ntrie.delete("Hikari");\n\nPrint(trie);\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-terminal"},"word: Billy\nword: Cathy\nword: Hikari\nword: Joe\n\nword: Billy\nword: Cathy\nword: Joe\n")),(0,r.kt)("h2",{id:"has\ud835\udc46"},"has(\ud835\udc46)"),(0,r.kt)("p",null,"Returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if the trie contains the string \ud835\udc46, ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'import { Trie } from "@crates";\nimport { Print } from "@util";\n\nconst trie = Trie("Anne", "Zoe", "Cathy", "Hikari");\n\nconst JoeVoted = trie.has("Joe");\nconst ZoeVoted = trie.has("Zoe");\nconst AnnVoted = trie.has("Ann");\n\nPrint(JoeVoted);\nPrint(ZoeVoted);\nPrint(AnnVoted);\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-terminal"},"false\ntrue\nfalse\n")),(0,r.kt)("p",null,"Note that the ",(0,r.kt)("inlineCode",{parentName:"p"},"has()")," method returns the result of a search for the exact\nmatch of \ud835\udc46. As such, the last query (",(0,r.kt)("inlineCode",{parentName:"p"},'"Ann"'),"), returns false because there\nis no word that exactly matches ",(0,r.kt)("inlineCode",{parentName:"p"},'"Ann"'),"."))}s.isMDXComponent=!0}}]);